package gameController;
import java.util.ArrayList;
import gameModel.Hero;
import gameModel.PlayerType;
import gameModel.Ranger;
import gameModel.Support;
import gameModel.Warrior;
import gameView.HeroView;
import gameView.TileView;
import gameView.TurnCheckerAlarm;
import javafx.scene.Group;

/**
 *
 * @author 		Jie Yi
 * @version 	1.2
 * @since 		1.0
 *
 * Description:
 *
 */


public class HeroController {

	private int width, height, tilesize;

	public HeroController(int width, int height, int tilesize) {
		this.width = width;
		this.height = height;
		this.tilesize = tilesize;

	}
/**
 * @author Tengku Ummil Syazwina Zainab
 * 
 * Description: DBC
 * 
 */
	//@Invariant("r.length <= 9") //the maximum number of heroes in the hero pool is 9
	//@Invariant("warrior.length && support.length && ranger.length == 2")
	
	//Adding a hero on the board
	//@Requires("Warrior.length && Support.length && Ranger.length == 2")
	//@Requires("PlayerType.BLUE = 3 && PlayerType.RED == 3)
	public Group createHeros(ArrayList<HeroView> heroArray,TileView[][] tileArray){
		Group group = new Group();
		ArrayList<Hero> r = new ArrayList<Hero>();
		// list add new warrior that with plyaerType
		r.add(new Warrior(width, height, PlayerType.BLUE));
		r.add(new Warrior(width, height, PlayerType.RED));

		r.add(new Support(width, height, PlayerType.BLUE));
		r.add(new Support(width, height, PlayerType.RED));

		r.add(new Ranger(width, height, PlayerType.BLUE));
		r.add(new Ranger(width, height, PlayerType.RED));

		for(Hero a : r){
			HeroView heroView = new HeroView(a.getStartX(), a.getStartY(),a.getPlayerType(), a.getRoleType(), tilesize);
			heroArray.add(heroView);


			tileArray[a.getStartX()][a.getStartY()].setHero(heroView); // ******* for future developing ----- maybe there will is some function need this

			TurnChecker t = new TurnChecker();


			heroView.setOnMouseClicked(e ->{

				//************************* for future developing ------ refractory (too many if statements)
				boolean selected = false;
				for(HeroView i : heroArray){
					if(i.isSelected())
						selected = true;
				}

				//@Requires("a.getValidType")
				if(!selected && t.isTurn() && a.getPlayerType() == PlayerType.RED){

					heroView.selecetedChanges();
					a.move(heroView.getLocX(), heroView.getLocY());

					for(int i = 0; i < a.getValidX().length; i++){
						showValidTiles(tileArray, a.getValidX()[i], a.getValidY()[i]);
					}
				}

				if(!selected && !t.isTurn() && a.getPlayerType() == PlayerType.BLUE){
					heroView.selecetedChanges();
					a.move(heroView.getLocX(), heroView.getLocY());


					for(int i = 0; i < a.getValidX().length; i++){
						// find all the valid tiles of the selected piece
						showValidTiles(tileArray, a.getValidX()[i], a.getValidY()[i]);
					}
				}

				if(t.isTurn() && a.getPlayerType() == PlayerType.BLUE || !t.isTurn() && a.getPlayerType() == PlayerType.RED)
					TurnCheckerAlarm.display();
			});


			group.getChildren().add(heroView);

		}

		return group;
	}

	private void showValidTiles(TileView[][] tile, int x, int y){
		tile[x][y].changeColor(); // call the method that change the special tiles.
	}
}
